{"version":3,"sources":["actions/index.js","components/ProductAdd.js","components/ProductEdit.js","components/ProductList.js","components/Navbar.js","App.js","serviceWorker.js","reducers/productsReducer.js","reducers/index.js","index.js"],"names":["apiUrl","ProductAdd","props","state","productName","price","type","refresh","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","addProduct","this","to","className","onSubmit","bind","placeholder","id","onChange","Component","connect","dispatch","product","axios","post","then","response","data","payload","catch","error","ProductEdit","handleEdit","updateProduct","location","undefined","handleChangeName","handleChangePrice","handleChangeType","console","log","disabled","onClick","patch","ProductList","editClick","history","push","pathname","searchingFor","term","x","toLowerCase","includes","isEdit","showSearch","searchHandler","get","result","products","length","filter","map","key","deleteProduct","delete","updatedRecords","item","Navbar","href","data-target","App","exact","path","component","Boolean","window","hostname","match","initialState","combineReducers","action","concat","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6ca0dd7d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const RECEIVE_PRODUCTS = \"GET_PRODUCTS\";\nexport const ADD_PRODUCT = \"ADD_PRODUCT\";\nexport const DELETE_PRODUCT = \"DELETE_PRODUCT\";\nexport const UPDATE_PRODUCT = \"UPDATE_PRODUCT\";\n\nconst apiUrl = \"http://localhost:8000/products\";\n\nconst receiveProducts = (data) => ({\n  type: RECEIVE_PRODUCTS,\n  products: data,\n});\n\nexport const getProducts = () => {\n  return (dispatch) => {\n    return axios\n      .get(apiUrl)\n      .then((response) => {\n        dispatch(receiveProducts(response.data));\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n};\n\nexport const addProduct = (product) => (dispatch) => {\n  return axios\n    .post(apiUrl, {\n      productName: product.productName,\n      price: product.price,\n      type: product.type,\n    })\n    .then((response) => {\n      let data = response.data;\n      dispatch({\n        type: ADD_PRODUCT,\n        payload: {\n          productName: data.productName,\n          price: data.price,\n          type: data.type,\n          id: data.id,\n        },\n      });\n    })\n    .catch((error) =>\n      dispatch({\n        error,\n      })\n    );\n};\n\nexport const deleteProduct = (id, products) => (dispatch) => {\n  return axios\n    .delete(apiUrl + \"/\" + id)\n    .then((response) => {\n      const updatedRecords = products.filter((item) => item.id !== id);\n\n      dispatch({ type: DELETE_PRODUCT, payload: updatedRecords });\n    })\n    .catch((error) =>\n      dispatch({\n        error,\n      })\n    );\n};\n\nexport const updateProduct = (product) => (dispatch) => {\n    return axios.patch(apiUrl + \"/\" + product.id, {\n        productName: product.productName,\n        price: product.price,\n        type: product.type\n    }).then(response => {\n        const data = response.data;\n        dispatch({type: UPDATE_PRODUCT, payload: {id: data.id, productName: data.productName, price: data.price, type: data.type}})\n    }).catch(error => {throw(error)});\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport {addProduct} from '../actions'; \nimport {Redirect} from \"react-router-dom\";\n\nclass ProductAdd extends Component{\n\n    constructor(props){\n        super(props);\n    }\n        \n    state = {\n        productName: '', \n        price:'',\n        type:'',\n        refresh: false\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name] : e.target.value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addProduct(this.state);\n        this.setState({\n          refresh: true,\n        });\n    }\n\n    render()\n    {\n      if(this.state.refresh){\n        return (<Redirect to=\"/products\"/>)\n      }\n      else{\n          return(\n          <div className=\"container\">\n            <h3>Add Products</h3>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                      <div className=\"row\">\n                        <input\n                          placeholder=\"Product Name\"\n                          id=\"productName\"\n                          type=\"text\"\n                          name=\"productName\"\n                          value={this.state.productName}\n                          onChange={this.handleChange}\n                        />\n                      </div>\n                      <div className=\"row\">\n                        <input\n                          placeholder=\"Price\"\n                          id=\"price\"\n                          type=\"text\"\n                          name=\"price\"\n                          value={this.state.price}\n                          onChange={this.handleChange}\n                        />\n                      </div>\n                      <div className=\"row\">\n                        <input\n                          placeholder=\"Type\"\n                          id=\"type\"\n                          type=\"text\"\n                          name=\"type\"\n                          value={this.state.type}\n                          onChange={this.handleChange}\n                        />\n                      </div>\n                      <div className=\"row displayNone\">\n                        <input type=\"text\" name=\"id\" value={this.state.id} />\n                      </div>\n                      <div className=\"row\">\n                        <button\n                          type=\"submit\"\n                          className=\"waves-effect waves-light btn right-align\"\n                        >\n                        Add  \n                        </button>\n                      </div>\n                </form>\n          </div>\n     );\n      }\n   \n    }   \n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addProduct: (product) => dispatch(addProduct(product)),\n    };\n};\n\n\nexport default connect(null,mapDispatchToProps)(ProductAdd);","import React, { Component } from \"react\";\nimport {connect} from \"react-redux\";\nimport {updateProduct} from \"../actions\";\nimport {Redirect} from \"react-router-dom\";\n\nclass ProductEdit extends Component {\n  constructor(props) {\n    super(props);\n\n    const { product } = this.props.location.state;\n\n    this.state = {\n      productName: product.productName !== undefined ? product.productName : \"\",\n      price: product.price !== undefined ? product.price : \"\",\n      type: product.type !== undefined ? product.type : \"\",\n      id: product.id !== undefined ? product.id : \"\",\n      refresh : false,\n    };\n\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangePrice = this.handleChangePrice.bind(this);\n    this.handleChangeType = this.handleChangeType.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  handleChangeName(e) {\n    e.preventDefault();\n    this.setState({\n      productName : e.target.value\n    });\n  }\n  handleChangePrice(e) {\n    e.preventDefault();\n    this.setState({\n      price : e.target.value\n    });\n  }\n  handleChangeType(e) {\n    e.preventDefault();\n    this.setState({\n      type : e.target.value\n    });\n  }\n\n  handleEdit = (e) => {\n       this.props.updateProduct(this.state);\n    //    return (<Redirect to=\"/products\" />);\n  } \n\n  handleSubmit =(e) => {\n      e.preventDefault();\n      this.setState({\n           refresh: true\n       });\n      \n  }\n\n  render() {\n    const { product } = this.props.location.state;\n\n    if(this.state.refresh){\n        return (<Redirect to=\"/products\" />);\n    }\n    else{\n        if (product !== undefined) {\n            return (\n                <div className=\"container\" >\n                <h3>Edit Products</h3>\n                <form onSubmit = {this.handleSubmit.bind(this)}>\n                    <div className=\"row\">\n                    <input\n                        placeholder=\"Product Name\"\n                        id=\"productName\"\n                        type=\"text\"\n                        name=\"productName\"\n                        value={this.state.productName}\n                        onChange={this.handleChangeName}\n                    />\n                    </div>\n                    <div className=\"row\">\n                    <input\n                        placeholder=\"Price\"\n                        id=\"price\"\n                        type=\"text\"\n                        name=\"price\"\n                        value={this.state.price}\n                        onChange={this.handleChangePrice}\n                    />\n                    </div>\n                    <div className=\"row\">\n                    <input\n                        placeholder=\"Type\"\n                        id=\"type\"\n                        type=\"text\"\n                        name=\"type\"\n                        value={this.state.type}\n                        onChange={this.handleChangeType}\n                    />\n                    </div>\n                    <div className=\"row\" className=\"displayNone\">\n                    <input\n                    disabled \n                        placeholder=\"ID\"\n                        id=\"ID\"\n                        type=\"text\"\n                        name=\"type\"\n                        value={this.state.id}\n                    />\n                    </div>\n                    <div className=\"row\">\n                    <button\n                        type=\"submit\"\n                        className=\"waves-effect waves-light btn right-align\"\n                        onClick = {this.handleEdit}\n                    >\n                        Add\n                    </button>\n                    </div>\n                </form>\n                </div>\n            );\n            } else {\n            return <h3>No Item</h3>;\n            }\n    }\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        updateProduct: (product) => dispatch(updateProduct(product))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(ProductEdit);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { deleteProduct } from \"../actions\";\nimport ProductEdit from \"./ProductEdit\";\nimport axios from \"axios\";\n\nclass ProductList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: \"\",\n      isEdit: false,\n      term: \"\",\n      showSearch: false,\n    };\n    this.searchHandler = this.searchHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const apiUrl = \"http://localhost:8000/products\";\n    axios\n      .get(apiUrl)\n      .then((response) => response.data)\n      .then(\n        (result) => {\n          this.setState({\n            products: result,\n          });\n        },\n        (error) => {\n          this.setState({ error });\n        }\n      );\n  }\n\n  //To pass products in Edit Component\n  editClick = (product) => {\n    this.props.history.push({\n      pathname: `/products/${product.id}/edit`,\n      state: {\n        product: product,\n      },\n    });\n  };\n\n  searchHandler(e){\n    this.setState({\n      term: e.target.value,\n      showSearch : true,\n    });\n  }\n\n  searchingFor = (term) => {\n    return function(x){\n      return x.productName.toLowerCase().includes(term.toLowerCase()) || !term;\n    }\n  }\n\n  render() {\n    console.log(this.props.products);\n\n    const { products } = this.props;\n\n    if (products.length > 0) {\n      return (\n\n        <div className=\"container\">\n\n         <div className=\"searchBox\">\n         <form>\n          <input className=\"searchBox\" placeholder=\"Search\" type=\"text\" \n            onChange={this.searchHandler}\n          />\n         </form>\n         </div>\n\n\n          <table className=\"striped tableClass\">\n            <thead>\n              <tr>\n                <th>Product Name</th>\n                <th>Price</th>\n                <th>Type</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody className=\"stripped\">\n              {products.filter(this.searchingFor(this.state.term)).map((product) => (\n                <tr key={product.id}>\n                  <td>{product.productName}</td>\n                  <td>{product.price}</td>\n                  <td>{product.type}</td>\n                  <td>\n                    <button\n                      className=\"waves-effect waves-light btn-small\"\n                      onClick={() => this.editClick(product)}\n                    >\n                      <i className=\"material-icons\">create</i>\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      className=\"waves-effect waves-light btn-small\"\n                      onClick={() =>\n                        this.props.deleteProduct(product.id, products)\n                      }\n                    >\n                      <i className=\"material-icons\">delete</i>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div>\n            {this.state.isEdit ? (\n              <ProductEdit product={this.state.product} />\n            ) : null}\n          </div>\n        </div>\n      );\n    } else {\n      return <div>Kindly, refresh the page</div>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => ({ products: state.products });\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteProduct: (id, products) => dispatch(deleteProduct(id, products)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\n","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\nconst Navbar = (props) => {\n  return(\n      <nav className=\"navbar-fixed teal lighten-2\">\n          <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\">\n          <i className=\"material-icons\">menu</i>\n          </a>\n        <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n          <li>\n            <Link to=\"/products\">\n                Display Products\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/products/new\" className=\"textClass\">\n              Add Product\n            </Link>\n          </li>\n        </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route,Switch } from \"react-router-dom\";\nimport ProductAdd from './components/ProductAdd';\nimport ProductEdit from './components/ProductEdit';\nimport ProductList from './components/ProductList';\nimport Navbar from \"./components/Navbar\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n        <Navbar />\n         <Switch>\n         <Route exact path =\"/\" component={ProductList} />\n        <Route exact path =\"/products\" component={ProductList} />\n        <Route exact path =\"/products/new\" component={ProductAdd} />\n        <Route exact path =\"/products/:id/edit\" component={ProductEdit} />\n        </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { RECEIVE_PRODUCTS, ADD_PRODUCT, DELETE_PRODUCT, UPDATE_PRODUCT } from \"../actions\";\n\nconst initialState = { products: [] };\nexport default function productsReducer(state = initialState, action) {\n  switch (action.type) {\n    case RECEIVE_PRODUCTS:\n      console.log(action);\n      return action.products;\n\n    case ADD_PRODUCT:\n      return [...state.concat(action.payload)];\n\n    case DELETE_PRODUCT:\n      return [...action.payload];\n\n    case UPDATE_PRODUCT:\n        debugger;\n        return{\n            ...state.map((product) => {\n                if(product.id === action.payload.id){\n                    debugger;\n                    return{\n                        productName: action.payload.productName,\n                        price: action.payload.price,\n                        type: action.payload.type\n                    }\n                }\n            })\n        }\n\n    default:\n      return state;\n  }\n}\n","\nimport {combineReducers} from 'redux';\nimport product from './productReducer';\nimport products from './productsReducer';\n\nexport default combineReducers({\n    products: products,\n    product: product,\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { Provider } from \"react-redux\";\nimport {getProducts} from './actions';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nstore.dispatch(getProducts());\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}